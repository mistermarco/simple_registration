<?php

define("REGISTERED", 1);
define("WAITLISTED", 2);


/**
 * Registration Form
 * This form appears in a block if the user is logged in, but is
 * not registered or wait listed.
 */

function simple_registration_register_form($form, $form_state) {
  $form['submit'] = array(
    '#attributes' => array('class' => array('waitlist', 'btn', 'success')),
    '#type' => 'submit',
    '#value' => t('Register')
  );
  return $form;
}

function simple_registration_register_form_submit($form, &$form_state) {
  global $user;
  simple_registration_register_user($user->uid);
}

/**
 * Wait List Form
 * This form appears in a block if the user is logged in, but is
 * not registered or wait listed, and the even is full.
 */

function simple_registration_waitlist_form($form, &$form_state) {
  $form['submit'] = array(
    '#attributes' => array('class' => array('waitlist', 'btn', 'success')),
    '#type' => 'submit',
    '#value' => t('Join Wait List'));
  return $form;
}

function simple_registration_waitlist_form_submit($form, &$form_state) {
  global $user;
  simple_registration_waitlist_user($user->uid);
}

/**
 * Cancellation Form for Registered User
 * This form appears in a block if the user is logged in and is
 * registered. The form asks for confirmation before cancelling registration.
 */


function simple_registration_cancel_form($form, &$form_state) {
  $form = array();
  if(!isset($form_state['storage']['confirm'])) {
    $form['submit'] = array(
      '#attributes' => array('class' => array('waitlist','btn', 'danger')),
      '#type' => 'submit',
      '#value' => t('Cancel Registration')
    );
    return $form;
  }
  else  {
    return confirm_form(
      $form,
      drupal_get_title(),
      drupal_get_path_alias(),
      '<h4>Are you sure?</h4>',
      'Yes, cancel my registration',
      'No, never mind'
    );
  }
}

function simple_registration_cancel_form_submit($form, &$form_state) {
  // if the form has not been confirmed yet, set the state and rebuild the form
  if(!isset($form_state['storage']['confirm'])) {
    $form_state['storage']['confirm'] = TRUE;
    $form_state['rebuild'] = TRUE;
  }
  else {
    global $user;
    simple_registration_cancel_user($user->uid);
    drupal_goto(drupal_get_path_alias());
  }
}

/**
 * Cancellation Form for Waitlisted User
 * This form appears in a block if the user is logged in and is
 * waitlisted. The form asks for confirmation before removing the user
 * from the waitlist.
 */

function simple_registration_cancel_waitlist_form($form, &$form_state) {
  if(!isset($form_state['storage']['confirm'])) {
    $form['submit'] = array(
      '#attributes' => array('class' => array('waitlist', 'btn', 'danger')),
      '#type' => 'submit',
      '#value' => t('Remove me from the wait list')
    );
    return $form;
  }
  else {
    return confirm_form($form, drupal_get_title(), drupal_get_path_alias(), '<h4>Are you sure?</h4>', 'Yes, remove me from the wait list', 'No, never mind');
  }
}

function simple_registration_cancel_waitlist_form_submit($form, &$form_state) {
    if(!isset($form_state['storage']['confirm'])) {
      $form_state['storage']['confirm'] = TRUE; // this will cause the form to be rebuilt, entering the confirm part of the form
      $form_state['rebuild'] = TRUE;
    }
    else {
      global $user;
      simple_registration_cancel_user($user->uid);
      drupal_goto(drupal_get_path_alias());
    }
}

/**
 * Implementation of hook_block_info()
 * This module creates one block to display registration, waitlist or
 * cancellation forms to a logged in user. If the user is not logged in,
 * this form displays a login link.
 */

function simple_registration_block_info() {
  $blocks['simple_registration'] = array(
    'info'  => t('Simple Registration'),
    'cache' => DRUPAL_NO_CACHE, 
  );

  $blocks['simple_registration_profile'] = array(
    'info' => t('Simple Registration: Profile'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}


/**
 * Implementation of hook_block_view().
 * @param string $delta code to identify the block
*/

function simple_registration_block_view($delta = '') {

  // set up an empty array which will contain the block contents
  $block = array();

  switch ($delta) {
    case 'simple_registration':
      $block_content = '';
      global $user;
      $block['subject'] = t('Registration');

      // if the user is logged in, we check their registration status
      if ($user->uid > 0) {
        $state = simple_registration_user_status($user->uid);

        if ($state == REGISTERED) {
          $block_content .= "You are currently <strong>registered</strong>.";
          $block_content .= "<br />If you can no longer attend, please cancel your registration so others have a chance to attend.";
          $block_content .= drupal_render(drupal_get_form('simple_registration_cancel_form'));
        }
        else if ($state == WAITLISTED) {
          $block_content .= "You are now on the <strong>wait list</strong>. If a space opens up, we'll contact you.";
          $block_content .= drupal_render(drupal_get_form('simple_registration_cancel_waitlist_form'));
        }
        else {
          $block_content .= "You are currently <strong>not registered</strong>.";
          if (simple_registration_spaces_available() > 0) {
            $block_content .= "<br />There are still spaces left, join us!";
            $block_content .= drupal_render(drupal_get_form('simple_registration_register_form'));
          }
          else if (simple_registration_waitlist_spaces_available() > 0) {
            $block_content .= "<br />The event is full, but you can join the wait list. As spaces open up, we'll automatically register people from the waiting list.";
            $block_content .= drupal_render(drupal_get_form('simple_registration_waitlist_form'));
          }
          else {
            $block_content .= "<br />Unfortunately, we are at maximum capacity and the waitlist is full.";
          }
        }
      }
      // if the user is anonymous, we'll ask them to log in before they can register.
      else {
        $block_content .= l(
          'Log in to register',
          variable_get('simple_registration_login_url', 'user/login'),
          array(
            'attributes' => array('class' => array('btn success')),
            'query'      => array(drupal_get_destination())
          )
        );
      }
      $block['content'] = $block_content;
      break; 
    case 'simple_registration_profile':
      $block_content = '';
      global $user;
	  if ($user->uid > 0) {
        $block['subject'] = t('Profile');
        $block_content .= "Logged in as $user->name (" . l('logout', 'logout') . ')<br />';
        $block_content .= "Fill out your profile to connect with others with similar interests.<br />";
        $block_content .= l(
          'Edit Profile',
          'user/' . $user->uid . '/edit',
          array(
            'attributes' => array('class' => array('btn', 'success'), 'id' => 'edit-profile-button'),
            'query' => array(drupal_get_destination())
          ));
      }
      $block['content'] = $block_content;
      break; 
  }
  return $block;
}

/**
 * Implementation of hook_menu().
 * Set up the module's settings form 
 */

function simple_registration_menu() {
  $items = array();

  $items['admin/config/simple_registration'] = array(
    'title' => t('Simple Registration'),
    'description' => t('Adjust Simple Registration Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_registration_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function simple_registration_admin($form, &$form_state) {
  $form = array();

  $form['simple_registration_max_attendees'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of attendees'),
    '#default_value' => variable_get('simple_registration_max_attendees', 250),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t("The maximum number of people who can attend the event."),
    '#required' => TRUE,
  );

  $form['simple_registration_max_waiting_list'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of people on waiting list'),
    '#default_value' => variable_get('simple_registration_max_waiting_list', 50),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t("The maximum number of people who can sign up for the waiting list."),
    '#required' => TRUE,
  );

  $form['simple_registration_login_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Login URL to use on the registration block'),
    '#default_value' => variable_get('simple_registration_login_url', 'user/login'),
    '#size' => 80,
    '#maxlength' => 120,
    '#description' => t("The login URL to use on the registration block."),
    '#required' => TRUE,
  );

  $form['simple_registration_bcc_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Notification Emails BCC Address'),
    '#default_value' => variable_get('simple_registration_bcc_email', ''),
    '#size' => 80,
    '#maxlength' => 120,
    '#description' => t('Email address to blind copy when users are emailed about changes to their registration status.'),
    '#required' => FALSE,
  );

  $form['email_title'] = array(
    '#type' => 'item',
    '#title' => t('E-mails'),
  );

  $form['simple_registration_email'] = array(
    '#type' => 'vertical_tabs',
  );

  $form['simple_registration_email_registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration'),
    '#collapsible' => TRUE,
    '#description' => t('Edit the e-mail message sent to users who have registered themselves.'),
    '#group' => 'simple_registration_email',
  );

  $form['simple_registration_email_registration']['simple_registration_email_registration_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _simple_registration_mail_text('registration_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#required' => TRUE,
  );

  $form['simple_registration_email_registration']['simple_registration_email_registration_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _simple_registration_mail_text('registration_body', NULL, array(), FALSE),
    '#rows' => 15,
  );

  $form['simple_registration_email_registration_from_waitlist'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration (automatic - from waitlist)'),
    '#collapsible' => TRUE,
    '#description' => t('Edit the e-mail message sent to users who have been registered from the wait list.'),
    '#group' => 'simple_registration_email',
  );

  $form['simple_registration_email_registration_from_waitlist']['simple_registration_email_registration_from_waitlist_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _simple_registration_mail_text('registration_from_waitlist_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#required' => TRUE,
  );

  $form['simple_registration_email_registration_from_waitlist']['simple_registration_email_registration_from_waitlistbody'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _simple_registration_mail_text('registration_from_waitlist_body', NULL, array(), FALSE),
    '#rows' => 15,
  );

  $form['simple_registration_email_cancellation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cancellation'),
    '#collapsible' => TRUE,
    '#description' => t('Edit the e-mail message sent to users who have canceled their registration.'),
    '#group' => 'simple_registration_email',
  );

  $form['simple_registration_email_cancellation']['simple_registration_email_cancellation_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _simple_registration_mail_text('cancellation_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#required' => TRUE,
  );

  $form['simple_registration_email_cancellation']['simple_registration_email_cancellationbody'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _simple_registration_mail_text('cancellation_body', NULL, array(), FALSE),
    '#rows' => 15,
  );

  $form['simple_registration_email_waitlist'] = array(
    '#type' => 'fieldset',
    '#title' => t('Waitlist'),
    '#collapsible' => TRUE,
    '#description' => t('Edit the e-mail message sent to users who have been waitlisted.'),
    '#group' => 'simple_registration_email',
  );

  $form['simple_registration_email_waitlist']['simple_registration_email_waitlist_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _simple_registration_mail_text('waitlist_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#required' => TRUE,
  );

  $form['simple_registration_email_waitlist']['simple_registration_email_waitlistbody'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _simple_registration_mail_text('waitlist_body', NULL, array(), FALSE),
    '#rows' => 15,
  );

  return system_settings_form($form);
}

/**
 * Find the user's current registration status
 */

function simple_registration_user_status($uid) {
  $state = db_query('SELECT state FROM {simple_registration_states} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  return $state;
}

/**
 *  Register the user
 */

function simple_registration_register_user($uid, $from_waitlist = FALSE) {
  $user = user_load($uid);

  // Log the registration
  watchdog('simple_registration','Registered: %user', array('%user' => $user->name));
  
  // Notify the user
  if ($from_waitlist) {
    simple_registration_notify($user, 'registration_from_waitlist');
  }
  else {
    simple_registration_notify($user, 'registration');
  }
  
  // Grant the user the Registered role
  simple_registration_grant_role($user, REGISTERED);

  // Create or update the user's status
  db_merge('simple_registration_states')
    ->key(array('uid' => $uid))
    ->fields(array(
      'state' => REGISTERED,
      'created' => REQUEST_TIME,
    ))
    ->execute();
}

/**
 *  Wait list the user
 */

function simple_registration_waitlist_user($uid) {
  $user = user_load($uid);

  // Log the wait list status
  watchdog('simple_registration','Waitlisted: %user', array('%user' => $user->name));

  // Notify the user
  simple_registration_notify($user, 'waitlist');

  // Grant the user the Waitlisted role
  simple_registration_grant_role($user, WAITLISTED);

  // Create or update the user's status
  db_merge('simple_registration_states')
    ->key(array('uid' => $uid))
    ->fields(array(
      'state' => WAITLISTED,
      'created' => REQUEST_TIME,
    ))
    ->execute();
}

/**
 *  Cancel the user's registration
 */

function simple_registration_cancel_user($uid) {
  $user = user_load($uid);

  // Log the event
  watchdog('simple_registration','Cancelled: %user', array('%user' => $user->name));

  // Grab the ID of the first waitlisted person
  // Note: in some cases, this user could be that waitlisted person
  $waitlisted_uid = simple_registration_waitlist_first_user();

  // Notify the user
  simple_registration_notify($user, 'cancellation');

  // Remove the role from the user
  simple_registration_grant_role($user, 0);

  // Find the state of the user (registered or waitlisted)
  $state = simple_registration_user_status($uid);

  // Delete their status
  db_delete('simple_registration_states')
    ->condition('uid', $uid)
    ->execute();

  // If there is a waitlisted user and this user was registered
  // cancelling this user's registration would have opened up a spot
  // therefore, register the first person on the wait list  

  if ($waitlisted_uid && ($state == REGISTERED)) {
    // register the user that was first on the waitlist
    $from_waitlist = TRUE;
    simple_registration_register_user($waitlisted_uid, $from_waitlist);
  }
}

/**
 *  Calculate how many seats are left
 *  This is the maximum number of attendees allowed, minus registered users
 */

function simple_registration_spaces_available() {
  $max_attendees = variable_get('simple_registration_max_attendees');
  $current_attendees = db_query('SELECT count(1) FROM {simple_registration_states} WHERE state = :state', array(':state' => REGISTERED))->fetchField();
  return $max_attendees - $current_attendees;
}


/**
 *  Calculate how many seats are left on the waitlist
 *  This is the maximum number of waitlisted attendees allowed, minus waitlisted users
 */

function simple_registration_waitlist_spaces_available() {
  $max_waitlisted = variable_get('simple_registration_max_waiting_list');
  $current_waitlisted = db_query('SELECT count(1) FROM {simple_registration_states} WHERE state = :state', array(':state' => WAITLISTED))->fetchField();
  return $max_waitlisted - $current_waitlisted;
}

/**
 *  Find who's next on the waitlist
 *  Note: there is a chance two people were waitlisted at the same time. In that case, the DB decides which to return
 */

function simple_registration_waitlist_first_user() {
   return db_query('SELECT uid FROM {simple_registration_states} WHERE state = :state order by created limit 1', array(':state' => WAITLISTED))->fetchField();
}

/**
 *  Find a user's location on the waitlist
 */

function simple_registration_waitlist_position($uid) {
  // TODO: we assume the user is waitlisted?
  // find the date the user was waitlisted
  // count the number of uid's of people that are waitlisted before or at the same time as this person but are not this person
  // add 1 (3 people waitlisted before, so this person is fourth, if there 0, this person is first
}

/**
 *  Send out an email to notify the user of a change in registration status
 */

function simple_registration_notify($account, $key) {
  $params['account'] = $account;
  drupal_mail('simple_registration', $key, $account->mail, user_preferred_language($account), $params);
}

/**
 *  Decide which email to send out and send it
 */

function simple_registration_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array('user' => $params['account']);
  $message['subject'] = _simple_registration_mail_text($key . '_subject', $language, $variables);
  $message['body'][]  = _simple_registration_mail_text($key . '_body',    $language, $variables);

  // Find out if the admin wants emails to bcc'ed to an email address 
  $bcc_email = trim(variable_get('simple_registration_bcc_email', ''));
  if (!empty($bcc_email)) {
    $message['headers']['Bcc'] = $bcc_email;
  }
}

function _simple_registration_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('simple_registration_mail_' . $key, FALSE)) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    // No override, return default string.
    switch($key) {
      case 'waitlist_subject':
        $text = t('Waitlist Receipt from [site:name]', array(), array('langcode' => $langcode));
        break;
      case 'waitlist_body':
        $text = t("Dear [user:name],\n\nYou have been wait listed for the [site:name].
                   \nAs people cancel, the first person on the wait list will be automatically registered.
                   \nIf that's you, you will receive an email to confirm your registration.
                  ", array(), array('langcode' => $langcode));
        break;
      case 'cancellation_subject':
        $text = t('Cancellation Receipt from [site:name]', array(), array('langcode' => $langcode));
        break;
      case 'cancellation_body':
        $text = t("Dear [user:name],
                  \nAs requested, we've cancelled your registration. We are sorry we won't get to see you at the event.
                  ", array(), array('langcode' => $langcode));
        break;
      case 'registration_subject':
        $text = t('Registration Receipt from [site:name]', array(), array('langcode' => $langcode));
        break;
      case 'registration_body':
        $text = t("Dear [user:name],
                  \nCongratulations! You have been registered for the [site:name].
                  \nIf for some reason you are unable to attend, we would ask that you kindly cancel your registration so that waitlisted registrants can be accommodated. To cancel your registration, please go to the following link:
                  \n[site:url]
                  ", array(), array('langcode' => $langcode));
        break;
      case 'registration_from_waitlist_subject':
        $text = t('Registration Receipt from [site:name]', array(), array('langcode' => $langcode));
        break;
      case 'registration_from_waitlist_body':
        $text = t("Dear [user:name],
                  \nCongratulations! A spot opened up and you have been registered for the [site:name].
                  \nIf for some reason you are unable to attend, we would ask that you kindly cancel your registration so that waitlisted registrants can be accommodated. To cancel your registration, please go to the following link:
                  \n[site:url]
                  ", array(), array('langcode' => $langcode));
        break;
      }
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array('language' => $language, 'callback' => 'user_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));
  }

  return $text;
}

/**
 * Grant the role to the user. In some cases, the role is 0
 * which removes both roles.
 */

function simple_registration_grant_role($account, $state) {

  $existing_roles = $account->roles;
  $new_roles = array();

  // Since users can only have one role, remove all of them
  // before assigning the new one.

  $registered_role = user_role_load_by_name('Registered');
  $waitlisted_role = user_role_load_by_name('Waitlisted');

  foreach ($existing_roles as $id => $name) {
    if (($id != $registered_role->rid) && ($id != $waitlisted_role->rid)) {
      $new_roles[$id] = $name;
    }
  }

  if ($state == REGISTERED) {
    $new_roles[$registered_role->rid] = 'Registered';
  }

  if ($state == WAITLISTED) {
    $new_roles[$waitlisted_role->rid] = 'Waitlisted';
  }

  user_save($account, array('roles' => $new_roles));
}
